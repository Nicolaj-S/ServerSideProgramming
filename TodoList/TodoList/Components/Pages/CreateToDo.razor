@page "/CreateItem"
@using TodoList.Code
@using TodoList.Model

@inject ToDoServices _service
@inject IHttpContextAccessor HttpContextAccessor
@inject AsymetriskHandler encryptionHandler

<h3>CreateToDo</h3>

<AuthorizeView>
    <Authorized Context="authContext">
        <EditForm Model="@todoItem" OnValidSubmit="HandleValidSubmit">
            <div class="form-group">
                <label for="description">Description:</label>
                <InputTextArea id="description" class="form-control" @bind-Value="@InputItemName" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>

        @if (todoItems == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Description</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in todoItems)
                    {
                        <tr>
                            <td>@encryptionHandler.Decrypt(item.ItemName)</td>
                            <AuthorizeView Roles="Admin">
                                <Authorized>
                                    <td>
                                        <button class="btn btn-danger" @onclick="() => DeleteItem(item.Id)">Delete</button>
                                    </td>
                                </Authorized>
                            </AuthorizeView>
                        </tr>
                    }
                </tbody>
            </table>

            <AuthorizeView Roles="Admin">
                <Authorized>
                    <button class="btn btn-warning" @onclick="DeleteAllItems">Delete All Items</button>
                </Authorized>
            </AuthorizeView>
        }
    </Authorized>
</AuthorizeView>

@code {
    private List<ToDo>? todoItems = new();
    private ToDo todoItem = new ToDo();
    public string InputItemName;
    public string CurrentUserId;

    private string CurrentId => HttpContextAccessor.HttpContext.User.Claims.FirstOrDefault()?.Value ?? "0";

    protected override async Task OnInitializedAsync()
    {
        todoItems = await GetItems(CurrentId);
    }

    private async Task HandleValidSubmit()
    {
        todoItem.UserId = CurrentId;
        todoItem.ItemName = encryptionHandler.Encrypt(InputItemName);

        if (await _service.CreateToDoItem(todoItem))
        {
            await GetItems(CurrentId);
            todoItem = new ToDo(); // Reset the form model
            InputItemName = string.Empty;
        }
    }

    private async Task DeleteItem(int itemId)
    {
        if (await _service.DeleteItem(itemId))
        {
            await GetItems(CurrentId);
        }
    }

    private async Task<List<ToDo>> GetItems(string userID) =>
        todoItems = await _service.GetItems(CurrentId);


    private async Task DeleteAllItems()
    {
        if (await _service.DeleteAllItems(CurrentId))
        {
            await GetItems(CurrentId);
        }
    }
}
